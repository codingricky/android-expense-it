package au.com.dius;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.Reader;

import org.apache.http.HeaderElement;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.protocol.HTTP;

import android.app.Activity;
import android.content.Intent;
import android.net.ParseException;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ListView;
import au.com.dius.model.Expense;
import au.com.dius.model.Receipt;
import au.com.dius.sql.ReceiptDataSource;

public class ReceiptListActivity extends Activity implements OnClickListener {

	private static final String TAG = "ReceiptListActivity";
	private ReceiptDataSource receiptDataSource;
	private ArrayAdapter<Receipt> adapter;

	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		receiptDataSource = new ReceiptDataSource(this);
		receiptDataSource.open();

		setContentView(R.layout.receipt);

		adapter = new ArrayAdapter<Receipt>(this, android.R.layout.simple_list_item_1, receiptDataSource.getAllReceipts());
		ListView listView = (ListView) findViewById(R.id.list);
		listView.setAdapter(adapter);

		Button addReceiptButton = (Button) findViewById(R.id.addReceiptButton);
		addReceiptButton.setOnClickListener(this);

		Button exportReceiptsButton = (Button) findViewById(R.id.exportReceiptsButton);
		exportReceiptsButton.setOnClickListener(new OnClickListener() {

			public void onClick(View v) {
				export();
			}
		});
	}

	private void export() {
		try {
//			
//            Intent intent = new Intent(this, CaptureSignature.class); 
//            startActivity(intent);

			DefaultHttpClient client = new DefaultHttpClient();
			HttpPost post = new HttpPost("http://expenseitserver.heroku.com");
			post.setHeader("Accept", "application/json");
			post.setHeader("Content-type", "application/json");
			
			Expense expense = new Expense("John Smith", receiptDataSource.getAllReceipts());
			post.setEntity(new StringEntity(expense.serialize()));
			HttpResponse response = client.execute(post);
			String id = response.getEntity().;
			Log.d(TAG, "response received=" + id);
			
			HttpGet excelGet = new HttpGet("http://expenseitserver.heroku.com/expense/" + id + "/excel/");
			HttpResponse excelResponse = client.execute(excelGet);
			
			File path = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);
		    File file = new File(path, "expenses.xls");
		    Log.d(TAG, "path=" + file.getAbsolutePath());
	        path.mkdirs();
	        file.createNewFile();
	        OutputStream os = new FileOutputStream(file);
	        excelResponse.getEntity().writeTo(os);
	        os.close();
	        
	        
	        Intent email = new Intent(Intent.ACTION_SEND);
	    	email.putExtra(Intent.EXTRA_EMAIL, new String[]{"ricky@dius.com.au"});		  
	    	email.putExtra(Intent.EXTRA_SUBJECT, "Expenses");
	    	email.putExtra(Intent.EXTRA_TEXT, "Please find attached my expenses:");
	    	email.setType("message/rfc822");
	    	email.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(file));
	    	startActivity(Intent.createChooser(email, "Choose an Email client :"));
	        
		} catch (Exception e) {
			Log.e(TAG, "export failed", e);
		}
	}

	public void onClick(View v) {
		startActivity(new Intent(this, ReceiptDetailActivity.class));
	}

	@Override
	protected void onResume() {
		receiptDataSource.open();
		adapter.clear();

		for (Receipt receipt : receiptDataSource.getAllReceipts()) {
			adapter.add(receipt);
		}

		adapter.notifyDataSetChanged();

		super.onResume();
	}

	@Override
	protected void onPause() {
		receiptDataSource.close();
		super.onPause();
	}

	public static String getResponseBody(final HttpEntity entity) throws IOException, ParseException {

		if (entity == null) {
			throw new IllegalArgumentException("HTTP entity may not be null");
		}

		InputStream instream = entity.getContent();

		if (instream == null) {
			return "";
		}

		if (entity.getContentLength() > Integer.MAX_VALUE) {
			throw new IllegalArgumentException(

			"HTTP entity too large to be buffered in memory");
		}

		String charset = getContentCharSet(entity);

		if (charset == null) {
			charset = HTTP.DEFAULT_CONTENT_CHARSET;
		}

		Reader reader = new InputStreamReader(instream, charset);

		StringBuilder buffer = new StringBuilder();

		try {

			char[] tmp = new char[1024];

			int l;

			while ((l = reader.read(tmp)) != -1) {

				buffer.append(tmp, 0, l);

			}

		} finally {

			reader.close();

		}

		return buffer.toString();

	}

	public String getContentCharSet(final HttpEntity entity) throws ParseException {

		if (entity == null) {
			throw new IllegalArgumentException("HTTP entity may not be null");
		}

		String charset = null;

		if (entity.getContentType() != null) {

			HeaderElement values[] = entity.getContentType().getElements();

			if (values.length > 0) {

				NameValuePair param = values[0].getParameterByName("charset");

				if (param != null) {

					charset = param.getValue();

				}

			}

		}

		return charset;

	}

}
