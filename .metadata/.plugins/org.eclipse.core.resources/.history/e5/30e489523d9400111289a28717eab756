package au.com.dius.sql;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;
import au.com.dius.model.Receipt;


public class ReceiptDataSource {

	private static final String FORMAT = "yyyy-MM-dd";
	private static final String TAG = ReceiptDataSource.class.getSimpleName();
	private SQLiteDatabase database;
	private ReceiptSQLiteHelper sqLiteHelper;
	private DateFormat dateFormat;
	
	public ReceiptDataSource(Context context) {
		sqLiteHelper = new ReceiptSQLiteHelper(context);
		dateFormat = new SimpleDateFormat(FORMAT);
	}

	public void open() throws SQLException {
		database = sqLiteHelper.getWritableDatabase();
	}

	public void close() {
		sqLiteHelper.close();
	}
	
	public Receipt saveReceipt(Receipt receipt) {
		ContentValues values = new ContentValues();
		values.put(ReceiptSQLiteHelper.CATEGORY_COLUMN, receipt.getCategory());
		values.put(ReceiptSQLiteHelper.CLIENT_COLUMN, receipt.getClient());
		values.put(ReceiptSQLiteHelper.AMOUNT_IN_CENTS_COLUMN, receipt.getAmountInCents());
		values.put(ReceiptSQLiteHelper.RECEIPT_DATE_COLUMN, dateFormat.format(receipt.getDate()));
		
		boolean isUpdate = receipt.getId() > -1;
		if (isUpdate) {
			values.put(ReceiptSQLiteHelper.ID_COLUMN, receipt.getId());
			database.update(ReceiptSQLiteHelper.TABLE_RECEIPTS, null, values);	
		} else {
			long insertedId = database.insert(ReceiptSQLiteHelper.TABLE_RECEIPTS, null, values);
			receipt.setId(insertedId);	
		}
		return receipt;
		
	}

	
	public List<Receipt> getAllReceipts() {
		List<Receipt> receipts = new ArrayList<Receipt>();
		
		Cursor cursor = null;
		
		try {
			cursor = database.query(ReceiptSQLiteHelper.TABLE_RECEIPTS, ReceiptSQLiteHelper.ALL_COLUMNS, null, null, null, null, ReceiptSQLiteHelper.RECEIPT_DATE_COLUMN + " desc");	
			cursor.moveToFirst();
			while (!cursor.isAfterLast()) {
				Receipt receipt = createReceiptFromCursor(cursor);
				receipts.add(receipt);
				cursor.moveToNext();
			}
			
		} finally {
			if (cursor != null) {
				cursor.close();
			}
		}
		return receipts;
	}

	private Receipt createReceiptFromCursor(Cursor cursor) {
		// should have a better way than retrieving values by index
		long receiptId = cursor.getLong(0);
		String client = cursor.getString(1);
		String category = cursor.getString(2);
		String date = cursor.getString(3);
		int amount = cursor.getInt(4);
		
		return new Receipt(receiptId, client, category, parseDate(date), amount);
	}
	
	private Date parseDate(String date) {
		try {
			return dateFormat.parse(date);
		} catch (ParseException e) {
			Log.e(TAG, "Parsing date failed, returning default date", e);
			return new Date();
		}
	}
}
